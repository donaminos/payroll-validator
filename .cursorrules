# Project: Payroll Data Validator (24h MVP - Recruitment Project)
# Stack: Next.js 15, React 19, Shadcn/ui, Tailwind 4, Turborepo
# Architecture: Feature-based monorepo with design system

## BUSINESS CONTEXT
- Domain: French employee management for HR professionals
- Use Case: Employee record management with search, filtering, and CRUD operations
- Performance Target: Load 1000+ employees in <3 seconds
- Mobile-first responsive design for HR managers and payroll administrators

## CODE STYLE & ARCHITECTURE

### TypeScript Standards
- Use strict mode with exact types
- Prefer interfaces over types for object shapes
- Use branded types for business domain (EmployeeId, SalaryAmount)
- Export types alongside components
- JSDoc for all public APIs

### React Patterns
- Function components with TypeScript
- Custom hooks for business logic isolation
- Server components by default (Next.js 15)
- Client components only when necessary (interactivity)
- Error boundaries for feature isolation
- Proper loading states with Suspense

### File Organization (Domain-based)
```
apps/web/src/
‚îú‚îÄ‚îÄ domains/           # Feature-based organization
‚îÇ   ‚îú‚îÄ‚îÄ employees/     # Employee management feature
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ service.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ types.ts
‚îÇ   ‚îú‚îÄ‚îÄ compliance/    # Compliance monitoring
‚îÇ   ‚îú‚îÄ‚îÄ onboarding/    # Onboarding management
‚îÇ   ‚îî‚îÄ‚îÄ offboarding/   # Offboarding management
‚îú‚îÄ‚îÄ shared/            # Shared components and utilities
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ constants/
‚îÇ   ‚îî‚îÄ‚îÄ utils/
‚îî‚îÄ‚îÄ views/             # Page-level components
    ‚îú‚îÄ‚îÄ dashboard/
    ‚îú‚îÄ‚îÄ employees/
    ‚îî‚îÄ‚îÄ auth/
```

### Naming Conventions
- Components: PascalCase (EmployeesTable.tsx)
- Hooks: camelCase with 'use' prefix (useEmployees.ts)
- Types: PascalCase with domain prefix (Employee, ValidationResult)
- Constants: SCREAMING_SNAKE_CASE (SMIC_2024, MAX_WEEKLY_HOURS)
- Files: kebab-case (employees-table.tsx)

## IMPORT ORGANIZATION
1. React imports first
2. Next.js imports
3. Third-party libraries (ordered alphabetically)
4. Shared package imports (@payroll/ui, @payroll/types, @payroll/schemas)
5. Feature-relative imports (./components, ../hooks)
6. Type-only imports last

## MONOREPO STRUCTURE

### Package Organization
```
packages/
‚îú‚îÄ‚îÄ ui/                    # Design System Package
‚îÇ   ‚îú‚îÄ‚îÄ src/components/    # Base UI components (Shadcn/ui)
‚îÇ   ‚îú‚îÄ‚îÄ src/composites/    # Complex UI components
‚îÇ   ‚îî‚îÄ‚îÄ stories/           # Storybook stories
‚îú‚îÄ‚îÄ types/                 # Shared TypeScript types
‚îú‚îÄ‚îÄ schemas/               # Zod validation schemas
‚îú‚îÄ‚îÄ tailwind-config/       # Shared Tailwind configuration
‚îú‚îÄ‚îÄ typescript-config/     # Shared TypeScript configuration
‚îî‚îÄ‚îÄ eslint-config/         # Shared ESLint configuration
```

### Package Dependencies
- `@payroll/ui`: Design system components
- `@payroll/types`: Shared TypeScript interfaces
- `@payroll/schemas`: Zod validation schemas
- `@payroll/tailwind-config`: Tailwind configuration
- `@payroll/typescript-config`: TypeScript configuration

## FRENCH EMPLOYEE MANAGEMENT BUSINESS RULES

### Legal Constants (2024)
- SMIC_MONTHLY: 1801 (euros gross)
- MAX_WEEKLY_HOURS: 48
- LEGAL_WEEKLY_HOURS: 35
- MAX_DAILY_HOURS: 10
- OVERTIME_RATE_125: 1.25 (first 8 hours)
- OVERTIME_RATE_150: 1.50 (beyond 43h/week)

### Employee Types
- CDI: Permanent contract (most common)
- CDD: Fixed-term contract
- Interim: Temporary work
- Stage: Internship

### Validation Categories
- BLOCKING_ERROR: Violates legal minimums (salary < SMIC)
- WARNING: Exceeds standards but may be legal (>35h with agreement)
- SUGGESTION: Best practice recommendations

### Data Format Requirements
- Currency: Always in euros, 2 decimal places
- Hours: Decimal format (37.5 not 37h30)
- Dates: ISO format (YYYY-MM-DD)
- Names: Trim whitespace, handle accents properly
- French phone: 10 digits format
- French postal code: 5 digits format

## PERFORMANCE REQUIREMENTS

### Data Loading
- Load 1000+ employees in under 3 seconds
- Search results appear within 200ms
- Smooth pagination without page reloads
- Efficient memory usage
- Caching for frequently accessed data

### Component Optimization
- Use React.memo for heavy table components
- Implement virtual scrolling for large datasets
- Lazy load employee detail modals
- Debounce search and filter inputs

## RESPONSIVE DESIGN

### Mobile-First Approach
- Design for 320px minimum width
- Touch-friendly targets (44px minimum)
- Horizontal scrolling for data tables
- Bottom sheets for mobile modals
- Sticky headers for long tables

### Breakpoints (Tailwind)
- sm: 640px (small tablets)
- md: 768px (tablets)
- lg: 1024px (laptops)
- xl: 1280px (desktops)

## ERROR HANDLING PATTERNS

### User-Facing Errors
- Toast notifications for immediate feedback
- Inline validation messages
- Error boundaries with recovery options
- Clear actionable error messages in French

### Developer Errors
- Console warnings for development
- Structured error logging
- Error boundary fallbacks
- Graceful degradation

## TESTING STRATEGY

### Unit Tests (Vitest)
- Test business logic in isolation
- Mock external dependencies
- Test error handling paths
- Validate French business rules

### E2E Tests (Playwright)
- Test complete user workflows
- Validate employee CRUD operations
- Test responsive behavior
- Performance benchmarks

## ACCESSIBILITY

### WCAG 2.1 AA Compliance
- Proper ARIA labels for screen readers
- Keyboard navigation support
- Color contrast ratios
- Focus management in modals
- Alt text for status indicators

## SECURITY CONSIDERATIONS

### Data Privacy
- No persistent storage of sensitive data (mock data only)
- Clear localStorage on session end
- HTTPS only for production
- Input sanitization for forms
- Rate limiting for API endpoints

## CURRENT IMPLEMENTATION STATUS

### ‚úÖ Completed Features
- API infrastructure for employees (GET, POST, PUT, DELETE)
- 1000 realistic French employee records
- DataTable component with search and pagination
- Sheet component for drawers
- Complete design system with Shadcn/ui
- Mobile-responsive layout components
- TypeScript interfaces and validation
- Dashboard with compliance monitoring
- Employee management interface

### üîÑ In Progress
- Employee details drawer implementation
- Add employee form with validation
- Advanced filtering and search

### ‚è≥ Future Enhancements (Post-MVP)
- File upload and validation features
- Export functionality
- Real-time validation with Web Workers
- Advanced reporting and analytics

## UI COMPONENTS

### Design System Foundation
- Base: Shadcn/ui + Tailwind 4 + Radix UI primitives
- Theme: Consistent token system
- Responsive: Mobile-first with adaptive breakpoints
- Accessibility: WCAG 2.1 AA compliance

### Essential Components
1. DataTable: Advanced table with search, pagination, sorting
2. EmployeeDetailsDrawer: Right-side drawer for employee information
3. AddEmployeeForm: Form in drawer for new employee creation
4. EmployeeFilters: Advanced filtering and search controls
5. StatusBadge: Color-coded status indicators

When suggesting code changes:
1. Always consider the business context (French employee management)
2. Maintain domain isolation in the monorepo structure
3. Optimize for mobile-first responsive design
4. Include proper TypeScript types and error handling
5. Follow the established naming conventions
6. Consider performance implications for large datasets
7. Use the existing design system components from @payroll/ui
8. Implement French-specific validation rules